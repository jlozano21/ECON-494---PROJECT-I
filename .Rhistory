#View each data set to identify variables and their number of observations
View(AAPL)
curve(dnorm(x, mean = mean(AAPL$Adj.Close.Change), sd = sd(AAPL$Adj.Close.Change)), col = "red", lwd = 2, add = TRUE) + facet_wrap(~COVID.19)
#To demonstrate the dramatic effects of COVID-19 on the Adj.Close, let's look at the Adj.Close.Change variable
mean(AAPL$Adj.Close.Change, na.rm=TRUE)
hist(AAPL$Adj.Close.Change, prob = TRUE)
curve(dnorm(x, mean = mean(AAPL$Adj.Close.Change), sd = sd(AAPL$Adj.Close.Change)), col = "red", lwd = 2, add = TRUE) + facet_wrap(~COVID.19)
#To demonstrate the dramatic effects of COVID-19 on the Adj.Close, let's look at the Adj.Close.Change variable
mean(AAPL$Adj.Close.Change, na.rm=TRUE)
#To demonstrate the dramatic effects of COVID-19 on the Adj.Close, let's look at the Adj.Close.Change variable
mean(AAPL)
#count the number of levels using the length() function,
#which returns the number of elements in a vector.
length(levels(df$Month))
#To import a dataset (this one is a CSV file specifically)
#directly from the internet, we can use:
df<-read.csv('https://raw.githubusercontent.com/slevkoff/CLASS_DATA/master/SALES.csv')
#Similarly, we can "grab" one variable using the '$' handle
#We summarize the Price variable below:
summary(df$Price)
#Summarize the Adjusted Close Change variable
summary(AAPL$Adj.Close.Change)
#Summarize the Adjusted Close Change variable
summary(AAPL$Adj.Close)
#We will now compute some summary statistics included as R base functions:
mean(df$Sales)  #computes the mean of the Sales variable
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
#check the levels (# of classes) of factor (categorical) variables
levels(df$Month)
#check the object class
class(df)
class(df$Sales)
class(df$Month)
AAPL_Adj.Close <- AAPL[,2]
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
if (AAPL_Adj.Close>58.37826){
print("Graeter than mean from 2017-2020")
} else {
print("Less than mean from 2017-2020")
}
AAPL_Adj.Close <- AAPL[,2]
if (AAPL_Adj.Close>58.37826){
print("Graeter than mean from 2017-2020")
} else {
print("Less than mean from 2017-2020")
}
#HERE IS A COMPARISON WITH FREQUENCY POLYGONS
ggplot(mpg, aes(displ, colour = drv)) +
geom_freqpoly(binwidth = 0.5)
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
if (AAPL_Adj.Close>58.37826){
print("Graeter than mean from 2017-2020")
} else {
print("Less than mean from 2017-2020")
}
x <- 0
while (x<10) {
if (x<=5){
print(x)
print("x is less than or equal to 5")
x <- x + 1
} else {
print(x)
print("x is greater than 5")
x <- x + 1
}
}
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("x is less than or equal to 5")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
} else {
print(AAPL_Adj.Close)
print("x is greater than 5")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
}
}
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
}
}
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
}
}
ITER <- 36
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
}
}
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
}
}
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
ITER <- 36
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close
}
}
AAPL_Adj.Close <- AAPL[,2]
while (AAPL_Adj.Close<58.37826) {
if (AAPL_Adj.Close<=58.37826){
print(AAPL_Adj.Close)
print("Adjusted Close is less than or equal to 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
} else {
print(AAPL_Adj.Close)
print("Adjusted Close is greater than 58.37826")
AAPL_Adj.Close <- AAPL_Adj.Close + 1
}
}
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
#Summarize the Adjusted Close variable
mean(AAPL$Adj.Close)
length(AAPL_Adj.Close)
AAPL_Adj.Close <- AAPL[,2]
if (AAPL_Adj.Close>58.37826){
print("Above the mean")
} else {
print("Below the mean")
}
if (AAPL_Adj.Close>58.37826){length(36)
print("Above the mean")
} else {length(36)
print("Below the mean")
}
if (AAPL_Adj.Close>58.37826){length()=36
print("Above the mean")
} else {length(36)
print("Below the mean")
}
if (AAPL_Adj.Close>58.37826){length()=36
print("Above the mean")
} else {length((36)))=36
print("Below the mean")
}
if (AAPL_Adj.Close>58.37826){length()=36
print("Above the mean")
} else {length()=36
print("Below the mean")
}
length()=36
if (AAPL_Adj.Close>58.37826){length()=36
print("Above the mean")
} else {length()=36
print("Below the mean")
}
View(df)
View(df)
ggplot(AAPL, aes(x=Adj.Close))
library(ggplot2)
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL, aes(x=Adj.Close)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
##ADDS HISTOGRAM GEOMETRY
plot_b<-ggplot(df, aes(x=Sales)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
plot_b
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=5)
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=.05)
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=.5)
ggplot(AAPL, aes(x=Adj.Close, y=Volume)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
View(MSFT)
View(MSFT)
View(plot_b)
View(plot_b)
plot_b
##INITIALIZES THE PLOT WITHOUT RENDERING THE DATA
plot_a<-ggplot(df, aes(x=Sales))
plot_a
##ADDS HISTOGRAM GEOMETRY
plot_b<-ggplot(df, aes(x=Sales)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
plot_b
#
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=2)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=5)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=10)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=12)
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
#PLOTS A NONPARAMETRIC DENSITY CURVE
plot_c<-ggplot(df,aes(x=Sales)) +
geom_density()
plot_c
#ADDING A VERTICAL LINE AT THE MEAN
plot_d<-ggplot(df, aes(Sales)) +
geom_vline(xintercept = mean(df$Sales))
plot_d
#COMBINES B, C, and D BY OVERLAYING NONPARAMETRIC DENSITY CURVE and VLINE
plot_e<-ggplot(df,aes(x=Sales)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000) +
geom_density() +
geom_vline(xintercept = mean(df$Sales))
plot_e
#CREATES OVERLAID HISTOGRAMS COLORED BY THE PROMO VARIABLE
plot_f<-ggplot(df,aes(x=Sales, fill = Promo)) +
geom_histogram(aes(y=..density..), position = "identity", binwidth=1000)
plot_f
#ADDS NONPARAMETRIC DENSITY ESTIMATE OVERLAYS FOR BOTH GROUPS
plot_g<-plot_f + geom_density(alpha=.5)  #alpha controls the degree of transparency on the density curve
plot_g
#CREATES A VECTOR OF MEANS FOR EACH GROUP
means <- ddply(df, "Promo", summarise, meansales=mean(Sales))
#ADDS VERTICAL LINES AT MEANS TO G
plot_h<-plot_g + geom_vline(data=means, aes(xintercept=meansales,  col=factor(Promo)), linetype="dashed", size=1, show.legend = FALSE)  #adds vertical line at the means for each distribution
plot_h
#CLEANING UP THE PLOT BY ADDING AXIS LABELS
plot_i<-plot_h +
xlab('Sales (Units Sold)') +  #x-axis label
ylab('Probability Density') #y-axis label
plot_i
#ADD AXIS SCALING
plot_j<-plot_i +
ylim(0,1.5e-4) + #controls x axis scale
xlim(mean(df$Sales)-3*sd(df$Sales), mean(df$Sales)+3*sd(df$Sales)) #controls y-axis scale
plot_j
#ADD TITLE TO PLOT
plot_k<-plot_j +
ggtitle('Comparison of Sales') #adds title
plot_k
#CENTER PLOT TITLE
plot_l<-plot_k +
ggtitle('Comparison of Sales') + #adds title
theme(plot.title = element_text(hjust = 0.5))
plot_l
#RELABEL LEGEND APPROPRIATELY
plot_m<-plot_l +
scale_fill_discrete(name = "Promo", labels = c("No", "Yes"))
plot_m
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
View(plot_a)
plot_a
plot_b
ggplot(AAPL, aes(x=Adj.Close)) + geom_density()
ggplot(AAPL, aes(Adj.Close)) + geom_vline(xintercept = mean(AAPL$Adj.Close))
plot_e
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
ggplot(AAPL, aes(x=Adj.Close)) + geom_density()
ggplot(AAPL, aes(Adj.Close)) + geom_vline(xintercept = mean(AAPL$Adj.Close))
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL, aes(x=Adj.Close, y=Adj.Close.Change)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1)
ggplot(AAPL, aes(x=Adj.Close)) + geom_density()
ggplot(AAPL, aes(Adj.Close)) + geom_vline(xintercept = mean(AAPL$Adj.Close))
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
ggplot(AAPL, aes(x=Adj.Close))
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
ggplot(MSFT,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(MSFT$Adj.Close))
ggplot(FB,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(FB$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=10) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=20) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
ggplot(FB,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=1) + geom_density() + geom_vline(xintercept = mean(FB$Adj.Close))
ggplot(FB,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=5) + geom_density() + geom_vline(xintercept = mean(FB$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=20) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
ggplot(FB,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=3) + geom_density() + geom_vline(xintercept = mean(FB$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=20) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
ggplot(MSFT,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=3) + geom_density() + geom_vline(xintercept = mean(MSFT$Adj.Close))
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=3) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=2) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
ggplot(MSFT,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=3) + geom_density() + geom_vline(xintercept = mean(MSFT$Adj.Close))
ggplot(FB,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=3) + geom_density() + geom_vline(xintercept = mean(FB$Adj.Close))
ggplot(SP500,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=20) + geom_density() + geom_vline(xintercept = mean(SP500$Adj.Close))
#Use this option to import from the internet
#Apple:
AAPL<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/AAPL.csv')
#View each data set to identify variables and their number of observations
#Apple:
View(AAPL)
#Microsoft:
MSFT<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/MSFT.csv')
#Facebook:
FB<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/FB.csv')
#Apple:
hist(AAPL$Adj.Close, prob = TRUE)
curve(dnorm(x, mean = mean(AAPL$Adj.Close), sd = sd(AAPL$Adj.Close)), col = "red", lwd = 2, add = TRUE)
#S&P 500 Index:
SP500<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/%5EGSPC.csv')
#Use this option to import locally
#Apple:
AAPL<-read.csv('AAPL.csv')
#Microsoft:
MSFT<-read.csv('MSFT.csv')
#Use this option to import from the internet
#Apple:
AAPL<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/AAPL.csv')
#Microsoft:
MSFT<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/MSFT.csv')
#Facebook:
FB<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/FB.csv')
#S&P 500 Index:
SP500<-read.csv('https://raw.githubusercontent.com/jlozano21/Project-I-Data-Sets/master/%5EGSPC.csv')
#View each data set to identify variables and their number of observations
#Apple:
View(AAPL)
#Microsoft:
View(MSFT)
#Facebook:
View(FB)
#S&P 500 Index:
View(SP500)
#Generate summary statistics for each data set
#Apple:
summary(AAPL)
#Microsoft:
summary(MSFT)
#Facebook:
summary(FB)
#S&P 500 Index:
summary(SP500)
#Look into summary of adjusted close for each data set to identify the trends for each
#company and the index to see if and how COVID-19 impacted them
#Apple:
summary(AAPL$Adj.Close)
#Microsoft:
summary(MSFT$Adj.Close)
#Facebook:
summary(FB$Adj.Close)
#S&P 500 Index:
summary(SP500$Adj.Close)
#Look into summary of volume for each data set to identify the shares sold for each
#company and the index to see if and how COVID-19 impacted them
#Apple:
summary(AAPL$Volume)
#Microsoft:
summary(MSFT$Volume)
#Facebook:
summary(FB$Volume)
#S&P 500 Index:
summary(SP500$Volume)
library(ggplot2)
#After installing, create scatter plot for each data and rendering the data using the geom point with corresponding colors
#Apple:
ggplot(AAPL, aes(Adj.Close, Volume)) + geom_point(color = "red")
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_point(color = "green")
#Facebook:
ggplot(FB, aes(Adj.Close, Volume)) + geom_point(color = "darkblue")
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close, Volume)) + geom_point(color = "yellow")
#Add facet_wrap() function to plot the object
#Apple:
ggplot(AAPL, aes(Adj.Close, Volume)) + geom_point(color = "red") + facet_wrap(~COVID.19)
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_point(color = "green") + facet_wrap(~COVID.19)
#Facebook:
ggplot(FB, aes(Adj.Close, Volume)) + geom_point(color = "darkblue") + facet_wrap(~COVID.19)
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close, Volume)) + geom_point(color = "yellow") + facet_wrap(~COVID.19)
#Add geom_line() function to plot the object
#Apple:
ggplot(AAPL, aes(Adj.Close, Volume)) + geom_point(color = "red") + facet_wrap(~COVID.19) + geom_line()
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_violin(fill='green')
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_point(color = "green") + facet_wrap(~COVID.19) + geom_line()
#Facebook:
ggplot(FB, aes(Adj.Close, Volume)) + geom_point(color = "darkblue") + facet_wrap(~COVID.19) + geom_line()
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close, Volume)) + geom_point(color = "yellow") + facet_wrap(~COVID.19) + geom_line()
#Violin plot to present an alternate perspective
#Apple:
ggplot(AAPL, aes(Adj.Close, Volume)) + geom_violin(fill='red')
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_violin(fill='green')
#Facebook:
ggplot(FB, aes(Adj.Close, Volume)) + geom_violin(fill='darkblue')
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close, Volume)) + geom_violin(fill='yellow')
#Violin plot with the facet_wrap function
#Apple:
ggplot(AAPL, aes(Adj.Close, Volume)) + geom_violin() + facet_wrap(~COVID.19)
#Microsoft:
ggplot(MSFT, aes(Adj.Close, Volume)) + geom_violin() + facet_wrap(~COVID.19)
#Facebook:
ggplot(FB, aes(Adj.Close, Volume)) + geom_violin() + facet_wrap(~COVID.19)
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close, Volume)) + geom_violin() + facet_wrap(~COVID.19)
#Box and whiskers plot with the facet_wrap function
#Apple:
ggplot(AAPL, aes(Adj.Close)) + geom_boxplot() + facet_wrap(~COVID.19)
#Facebook:
ggplot(FB, aes(Adj.Close)) + geom_boxplot() + facet_wrap(~COVID.19)
#The polygon histogram allows us to identify the overall adjusted close prices
#Apple:
ggplot(AAPL, aes(Adj.Close)) + geom_freqpoly()
#Microsoft:
ggplot(MSFT, aes(Adj.Close)) + geom_freqpoly()
#Facebook:
ggplot(FB, aes(Adj.Close)) + geom_freqpoly()
#S&P 500 Index:
ggplot(SP500, aes(Adj.Close)) + geom_freqpoly()
#The polygon histogram allows us to identify the overall adjusted close prices
#Apple:
ggplot(AAPL, aes(Adj.Close)) + geom_freqpoly()
#To illustrate the TIDY data set the final step would be to layer a density curve over a bar graph demonstrating the relationship
#between the Adjusted CLose and the percentage points that it changes when the value increases or decreases
#Apple:
ggplot(AAPL,aes(x=Adj.Close)) + geom_histogram(aes(y=..density..), position = "identity", binwidth=2) + geom_density() + geom_vline(xintercept = mean(AAPL$Adj.Close))
#Apple:
hist(AAPL$Adj.Close, prob = TRUE)
curve(dnorm(x, mean = mean(AAPL$Adj.Close), sd = sd(AAPL$Adj.Close)), col = "red", lwd = 2, add = TRUE)
#View each data set to identify variables and their number of observations
#Apple:
View(AAPL)
#Microsoft:
View(MSFT)
hist(AAPL$Volume, prob = TRUE)
curve(dnorm(x, mean = mean(AAPL$Volume), sd = sd(AAPL$Volume)), col = "red", lwd = 2, add = TRUE)
#Facebook:
FB<-read.csv('FB.csv')
#Facebook:
View(FB)
#S&P 500 Index:
View(SP500)
